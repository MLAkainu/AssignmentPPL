# Generated from d://Assignment//cslang-initial//src//main//CSlang//parser//CSlang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
 # 2110342 - Nguyen Minh Loc


def serializedATN():
    return [
        4,0,63,494,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,1,0,1,0,3,0,152,8,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
        21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
        25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
        30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,
        36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,
        43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,
        49,1,50,1,50,1,51,1,51,1,51,1,51,5,51,343,8,51,10,51,12,51,346,9,
        51,1,51,1,51,1,52,1,52,1,52,1,52,5,52,354,8,52,10,52,12,52,357,9,
        52,1,52,1,52,1,52,1,52,1,52,1,53,4,53,365,8,53,11,53,12,53,366,1,
        53,1,53,1,54,1,54,5,54,373,8,54,10,54,12,54,376,9,54,1,55,1,55,1,
        56,1,56,1,56,3,56,383,8,56,1,56,1,56,3,56,387,8,56,1,56,1,56,3,56,
        391,8,56,1,57,1,57,5,57,395,8,57,10,57,12,57,398,9,57,1,57,1,57,
        1,57,1,58,1,58,1,58,5,58,406,8,58,10,58,12,58,409,9,58,3,58,411,
        8,58,1,59,1,59,5,59,415,8,59,10,59,12,59,418,9,59,1,60,1,60,3,60,
        422,8,60,1,60,4,60,425,8,60,11,60,12,60,426,1,61,1,61,3,61,431,8,
        61,1,62,1,62,1,62,1,63,1,63,3,63,438,8,63,1,63,1,63,1,63,5,63,443,
        8,63,10,63,12,63,446,9,63,1,64,1,64,4,64,450,8,64,11,64,12,64,451,
        1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,3,69,464,8,69,
        1,70,1,70,1,71,1,71,1,71,1,72,1,72,5,72,473,8,72,10,72,12,72,476,
        9,72,1,72,3,72,479,8,72,1,72,1,72,1,73,1,73,5,73,485,8,73,10,73,
        12,73,488,9,73,1,73,1,73,1,73,1,73,1,73,1,355,0,74,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
        49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,
        117,0,119,0,121,0,123,0,125,0,127,59,129,60,131,0,133,0,135,0,137,
        0,139,0,141,0,143,61,145,62,147,63,1,0,11,2,0,10,10,13,13,3,0,9,
        10,13,13,32,32,1,0,49,57,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,
        45,4,0,10,10,13,13,34,34,92,92,7,0,34,34,92,92,98,98,102,102,110,
        110,114,114,116,116,4,0,48,57,65,90,95,95,97,122,1,0,65,90,1,0,97,
        122,506,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
        0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
        0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,
        0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
        0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
        1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,127,1,0,0,0,
        0,129,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,1,151,1,
        0,0,0,3,153,1,0,0,0,5,159,1,0,0,0,7,168,1,0,0,0,9,171,1,0,0,0,11,
        176,1,0,0,0,13,180,1,0,0,0,15,185,1,0,0,0,17,191,1,0,0,0,19,195,
        1,0,0,0,21,201,1,0,0,0,23,206,1,0,0,0,25,213,1,0,0,0,27,220,1,0,
        0,0,29,225,1,0,0,0,31,231,1,0,0,0,33,243,1,0,0,0,35,247,1,0,0,0,
        37,252,1,0,0,0,39,256,1,0,0,0,41,261,1,0,0,0,43,267,1,0,0,0,45,272,
        1,0,0,0,47,275,1,0,0,0,49,278,1,0,0,0,51,281,1,0,0,0,53,284,1,0,
        0,0,55,287,1,0,0,0,57,289,1,0,0,0,59,291,1,0,0,0,61,294,1,0,0,0,
        63,297,1,0,0,0,65,300,1,0,0,0,67,302,1,0,0,0,69,304,1,0,0,0,71,306,
        1,0,0,0,73,308,1,0,0,0,75,310,1,0,0,0,77,312,1,0,0,0,79,314,1,0,
        0,0,81,316,1,0,0,0,83,318,1,0,0,0,85,320,1,0,0,0,87,322,1,0,0,0,
        89,324,1,0,0,0,91,326,1,0,0,0,93,328,1,0,0,0,95,330,1,0,0,0,97,332,
        1,0,0,0,99,334,1,0,0,0,101,336,1,0,0,0,103,338,1,0,0,0,105,349,1,
        0,0,0,107,364,1,0,0,0,109,370,1,0,0,0,111,377,1,0,0,0,113,390,1,
        0,0,0,115,392,1,0,0,0,117,410,1,0,0,0,119,412,1,0,0,0,121,419,1,
        0,0,0,123,430,1,0,0,0,125,432,1,0,0,0,127,437,1,0,0,0,129,447,1,
        0,0,0,131,453,1,0,0,0,133,455,1,0,0,0,135,457,1,0,0,0,137,459,1,
        0,0,0,139,463,1,0,0,0,141,465,1,0,0,0,143,467,1,0,0,0,145,470,1,
        0,0,0,147,482,1,0,0,0,149,152,3,33,16,0,150,152,3,41,20,0,151,149,
        1,0,0,0,151,150,1,0,0,0,152,2,1,0,0,0,153,154,5,98,0,0,154,155,5,
        114,0,0,155,156,5,101,0,0,156,157,5,97,0,0,157,158,5,107,0,0,158,
        4,1,0,0,0,159,160,5,99,0,0,160,161,5,111,0,0,161,162,5,110,0,0,162,
        163,5,116,0,0,163,164,5,105,0,0,164,165,5,110,0,0,165,166,5,117,
        0,0,166,167,5,101,0,0,167,6,1,0,0,0,168,169,5,105,0,0,169,170,5,
        102,0,0,170,8,1,0,0,0,171,172,5,101,0,0,172,173,5,108,0,0,173,174,
        5,115,0,0,174,175,5,101,0,0,175,10,1,0,0,0,176,177,5,102,0,0,177,
        178,5,111,0,0,178,179,5,114,0,0,179,12,1,0,0,0,180,181,5,116,0,0,
        181,182,5,114,0,0,182,183,5,117,0,0,183,184,5,101,0,0,184,14,1,0,
        0,0,185,186,5,102,0,0,186,187,5,97,0,0,187,188,5,108,0,0,188,189,
        5,115,0,0,189,190,5,101,0,0,190,16,1,0,0,0,191,192,5,105,0,0,192,
        193,5,110,0,0,193,194,5,116,0,0,194,18,1,0,0,0,195,196,5,102,0,0,
        196,197,5,108,0,0,197,198,5,111,0,0,198,199,5,97,0,0,199,200,5,116,
        0,0,200,20,1,0,0,0,201,202,5,98,0,0,202,203,5,111,0,0,203,204,5,
        111,0,0,204,205,5,108,0,0,205,22,1,0,0,0,206,207,5,115,0,0,207,208,
        5,116,0,0,208,209,5,114,0,0,209,210,5,105,0,0,210,211,5,110,0,0,
        211,212,5,103,0,0,212,24,1,0,0,0,213,214,5,114,0,0,214,215,5,101,
        0,0,215,216,5,116,0,0,216,217,5,117,0,0,217,218,5,114,0,0,218,219,
        5,110,0,0,219,26,1,0,0,0,220,221,5,110,0,0,221,222,5,117,0,0,222,
        223,5,108,0,0,223,224,5,108,0,0,224,28,1,0,0,0,225,226,5,99,0,0,
        226,227,5,108,0,0,227,228,5,97,0,0,228,229,5,115,0,0,229,230,5,115,
        0,0,230,30,1,0,0,0,231,232,5,99,0,0,232,233,5,111,0,0,233,234,5,
        110,0,0,234,235,5,115,0,0,235,236,5,116,0,0,236,237,5,114,0,0,237,
        238,5,117,0,0,238,239,5,99,0,0,239,240,5,116,0,0,240,241,5,111,0,
        0,241,242,5,114,0,0,242,32,1,0,0,0,243,244,5,118,0,0,244,245,5,97,
        0,0,245,246,5,114,0,0,246,34,1,0,0,0,247,248,5,115,0,0,248,249,5,
        101,0,0,249,250,5,108,0,0,250,251,5,102,0,0,251,36,1,0,0,0,252,253,
        5,110,0,0,253,254,5,101,0,0,254,255,5,119,0,0,255,38,1,0,0,0,256,
        257,5,118,0,0,257,258,5,111,0,0,258,259,5,105,0,0,259,260,5,100,
        0,0,260,40,1,0,0,0,261,262,5,99,0,0,262,263,5,111,0,0,263,264,5,
        110,0,0,264,265,5,115,0,0,265,266,5,116,0,0,266,42,1,0,0,0,267,268,
        5,102,0,0,268,269,5,117,0,0,269,270,5,110,0,0,270,271,5,99,0,0,271,
        44,1,0,0,0,272,273,5,38,0,0,273,274,5,38,0,0,274,46,1,0,0,0,275,
        276,5,124,0,0,276,277,5,124,0,0,277,48,1,0,0,0,278,279,5,61,0,0,
        279,280,5,61,0,0,280,50,1,0,0,0,281,282,5,58,0,0,282,283,5,61,0,
        0,283,52,1,0,0,0,284,285,5,33,0,0,285,286,5,61,0,0,286,54,1,0,0,
        0,287,288,5,60,0,0,288,56,1,0,0,0,289,290,5,62,0,0,290,58,1,0,0,
        0,291,292,5,60,0,0,292,293,5,61,0,0,293,60,1,0,0,0,294,295,5,62,
        0,0,295,296,5,61,0,0,296,62,1,0,0,0,297,298,5,60,0,0,298,299,5,45,
        0,0,299,64,1,0,0,0,300,301,5,43,0,0,301,66,1,0,0,0,302,303,5,45,
        0,0,303,68,1,0,0,0,304,305,5,42,0,0,305,70,1,0,0,0,306,307,5,47,
        0,0,307,72,1,0,0,0,308,309,5,92,0,0,309,74,1,0,0,0,310,311,5,33,
        0,0,311,76,1,0,0,0,312,313,5,61,0,0,313,78,1,0,0,0,314,315,5,94,
        0,0,315,80,1,0,0,0,316,317,5,37,0,0,317,82,1,0,0,0,318,319,5,44,
        0,0,319,84,1,0,0,0,320,321,5,59,0,0,321,86,1,0,0,0,322,323,5,58,
        0,0,323,88,1,0,0,0,324,325,5,46,0,0,325,90,1,0,0,0,326,327,5,40,
        0,0,327,92,1,0,0,0,328,329,5,41,0,0,329,94,1,0,0,0,330,331,5,91,
        0,0,331,96,1,0,0,0,332,333,5,93,0,0,333,98,1,0,0,0,334,335,5,123,
        0,0,335,100,1,0,0,0,336,337,5,125,0,0,337,102,1,0,0,0,338,339,5,
        47,0,0,339,340,5,47,0,0,340,344,1,0,0,0,341,343,8,0,0,0,342,341,
        1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,347,
        1,0,0,0,346,344,1,0,0,0,347,348,6,51,0,0,348,104,1,0,0,0,349,350,
        5,47,0,0,350,351,5,42,0,0,351,355,1,0,0,0,352,354,9,0,0,0,353,352,
        1,0,0,0,354,357,1,0,0,0,355,356,1,0,0,0,355,353,1,0,0,0,356,358,
        1,0,0,0,357,355,1,0,0,0,358,359,5,42,0,0,359,360,5,47,0,0,360,361,
        1,0,0,0,361,362,6,52,0,0,362,106,1,0,0,0,363,365,7,1,0,0,364,363,
        1,0,0,0,365,366,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,368,
        1,0,0,0,368,369,6,53,0,0,369,108,1,0,0,0,370,374,7,2,0,0,371,373,
        7,3,0,0,372,371,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,
        1,0,0,0,375,110,1,0,0,0,376,374,1,0,0,0,377,378,3,117,58,0,378,112,
        1,0,0,0,379,380,3,117,58,0,380,382,3,119,59,0,381,383,3,121,60,0,
        382,381,1,0,0,0,382,383,1,0,0,0,383,391,1,0,0,0,384,386,3,117,58,
        0,385,387,3,119,59,0,386,385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,
        0,0,388,389,3,121,60,0,389,391,1,0,0,0,390,379,1,0,0,0,390,384,1,
        0,0,0,391,114,1,0,0,0,392,396,5,34,0,0,393,395,3,123,61,0,394,393,
        1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,399,
        1,0,0,0,398,396,1,0,0,0,399,400,5,34,0,0,400,401,6,57,1,0,401,116,
        1,0,0,0,402,411,5,48,0,0,403,407,7,2,0,0,404,406,7,3,0,0,405,404,
        1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,411,
        1,0,0,0,409,407,1,0,0,0,410,402,1,0,0,0,410,403,1,0,0,0,411,118,
        1,0,0,0,412,416,5,46,0,0,413,415,7,3,0,0,414,413,1,0,0,0,415,418,
        1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,120,1,0,0,0,418,416,
        1,0,0,0,419,421,7,4,0,0,420,422,7,5,0,0,421,420,1,0,0,0,421,422,
        1,0,0,0,422,424,1,0,0,0,423,425,7,3,0,0,424,423,1,0,0,0,425,426,
        1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,122,1,0,0,0,428,431,
        8,6,0,0,429,431,3,125,62,0,430,428,1,0,0,0,430,429,1,0,0,0,431,124,
        1,0,0,0,432,433,5,92,0,0,433,434,7,7,0,0,434,126,1,0,0,0,435,438,
        3,139,69,0,436,438,3,137,68,0,437,435,1,0,0,0,437,436,1,0,0,0,438,
        444,1,0,0,0,439,443,3,139,69,0,440,443,3,137,68,0,441,443,3,135,
        67,0,442,439,1,0,0,0,442,440,1,0,0,0,442,441,1,0,0,0,443,446,1,0,
        0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,128,1,0,0,0,446,444,1,0,
        0,0,447,449,3,141,70,0,448,450,7,8,0,0,449,448,1,0,0,0,450,451,1,
        0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,130,1,0,0,0,453,454,7,
        9,0,0,454,132,1,0,0,0,455,456,7,10,0,0,456,134,1,0,0,0,457,458,7,
        3,0,0,458,136,1,0,0,0,459,460,5,95,0,0,460,138,1,0,0,0,461,464,3,
        131,65,0,462,464,3,133,66,0,463,461,1,0,0,0,463,462,1,0,0,0,464,
        140,1,0,0,0,465,466,5,64,0,0,466,142,1,0,0,0,467,468,9,0,0,0,468,
        469,6,71,2,0,469,144,1,0,0,0,470,474,5,34,0,0,471,473,3,123,61,0,
        472,471,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,
        475,478,1,0,0,0,476,474,1,0,0,0,477,479,5,0,0,1,478,477,1,0,0,0,
        478,479,1,0,0,0,479,480,1,0,0,0,480,481,6,72,3,0,481,146,1,0,0,0,
        482,486,5,34,0,0,483,485,3,123,61,0,484,483,1,0,0,0,485,488,1,0,
        0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,486,1,0,
        0,0,489,490,5,92,0,0,490,491,8,7,0,0,491,492,1,0,0,0,492,493,6,73,
        4,0,493,148,1,0,0,0,24,0,151,344,355,366,374,382,386,390,396,407,
        410,416,421,426,430,437,442,444,451,463,474,478,486,5,6,0,0,1,57,
        0,1,71,1,1,72,2,1,73,3
    ]

class CSlangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Attribute_name = 1
    BREAK = 2
    CONTINUE = 3
    IF = 4
    ELSE = 5
    FOR = 6
    TRUE = 7
    FALSE = 8
    INT = 9
    FLOAT = 10
    BOOL = 11
    STRING = 12
    RETURN = 13
    NULL = 14
    CLASS = 15
    CONSTRUCTOR = 16
    VAR = 17
    SELF = 18
    NEW = 19
    VOID = 20
    CONST = 21
    FUNC = 22
    AND = 23
    OR = 24
    EQUAL = 25
    ASSIGN = 26
    NOT_EQUAL = 27
    LESS_THAN = 28
    GREATER_THAN = 29
    LESS_THAN_EQUAL = 30
    GREATER_THAN_EQUAL = 31
    SUPERCLASS = 32
    ADD = 33
    SUB = 34
    MUL = 35
    DIV_FLOAT = 36
    DIV_INT = 37
    NOT = 38
    EQ = 39
    STRING_CONCAT = 40
    MOD = 41
    COMMA = 42
    SEMI = 43
    COLON = 44
    DOT = 45
    LP = 46
    RP = 47
    LSB = 48
    RSB = 49
    LB = 50
    RB = 51
    LINE_COMMENT = 52
    BLOCK_COMMENT = 53
    WS = 54
    INTARR = 55
    INTLIT = 56
    FLOATLIT = 57
    STRINGLIT = 58
    ID = 59
    STATIC_ID = 60
    ERROR_CHAR = 61
    UNCLOSE_STRING = 62
    ILLEGAL_ESCAPE = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'break'", "'continue'", "'if'", "'else'", "'for'", "'true'", 
            "'false'", "'int'", "'float'", "'bool'", "'string'", "'return'", 
            "'null'", "'class'", "'constructor'", "'var'", "'self'", "'new'", 
            "'void'", "'const'", "'func'", "'&&'", "'||'", "'=='", "':='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'<-'", "'+'", "'-'", 
            "'*'", "'/'", "'\\'", "'!'", "'='", "'^'", "'%'", "','", "';'", 
            "':'", "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "Attribute_name", "BREAK", "CONTINUE", "IF", "ELSE", "FOR", 
            "TRUE", "FALSE", "INT", "FLOAT", "BOOL", "STRING", "RETURN", 
            "NULL", "CLASS", "CONSTRUCTOR", "VAR", "SELF", "NEW", "VOID", 
            "CONST", "FUNC", "AND", "OR", "EQUAL", "ASSIGN", "NOT_EQUAL", 
            "LESS_THAN", "GREATER_THAN", "LESS_THAN_EQUAL", "GREATER_THAN_EQUAL", 
            "SUPERCLASS", "ADD", "SUB", "MUL", "DIV_FLOAT", "DIV_INT", "NOT", 
            "EQ", "STRING_CONCAT", "MOD", "COMMA", "SEMI", "COLON", "DOT", 
            "LP", "RP", "LSB", "RSB", "LB", "RB", "LINE_COMMENT", "BLOCK_COMMENT", 
            "WS", "INTARR", "INTLIT", "FLOATLIT", "STRINGLIT", "ID", "STATIC_ID", 
            "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "Attribute_name", "BREAK", "CONTINUE", "IF", "ELSE", "FOR", 
                  "TRUE", "FALSE", "INT", "FLOAT", "BOOL", "STRING", "RETURN", 
                  "NULL", "CLASS", "CONSTRUCTOR", "VAR", "SELF", "NEW", 
                  "VOID", "CONST", "FUNC", "AND", "OR", "EQUAL", "ASSIGN", 
                  "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_THAN_EQUAL", 
                  "GREATER_THAN_EQUAL", "SUPERCLASS", "ADD", "SUB", "MUL", 
                  "DIV_FLOAT", "DIV_INT", "NOT", "EQ", "STRING_CONCAT", 
                  "MOD", "COMMA", "SEMI", "COLON", "DOT", "LP", "RP", "LSB", 
                  "RSB", "LB", "RB", "LINE_COMMENT", "BLOCK_COMMENT", "WS", 
                  "INTARR", "INTLIT", "FLOATLIT", "STRINGLIT", "INTPART", 
                  "DECPART", "EXPPART", "CHAR", "ESCAPE", "ID", "STATIC_ID", 
                  "UPPER", "LOWER", "DIGIT", "UNDERSCORE", "LETTER", "AT", 
                  "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "CSlang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[57] = self.STRINGLIT_action 
            actions[71] = self.ERROR_CHAR_action 
            actions[72] = self.UNCLOSE_STRING_action 
            actions[73] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

            	self.text = self.text[1:-1]

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            	y = str(self.text)
            	raise UncloseString(y[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

            	raise IllegalEscape(self.text[1:])

     


