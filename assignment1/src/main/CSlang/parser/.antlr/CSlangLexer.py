# Generated from d://Assignment//assignment1//src//main//CSlang//parser//CSlang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
 # 2110342 - Nguyen Minh Loc


def serializedATN():
    return [
        4,0,62,488,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,
        22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,
        27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,
        32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,
        39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,
        45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,5,
        50,337,8,50,10,50,12,50,340,9,50,1,50,1,50,1,51,1,51,1,51,1,51,5,
        51,348,8,51,10,51,12,51,351,9,51,1,51,1,51,1,51,1,51,1,51,1,52,4,
        52,359,8,52,11,52,12,52,360,1,52,1,52,1,53,1,53,5,53,367,8,53,10,
        53,12,53,370,9,53,1,54,1,54,1,55,1,55,1,55,3,55,377,8,55,1,55,1,
        55,3,55,381,8,55,1,55,1,55,3,55,385,8,55,1,56,1,56,5,56,389,8,56,
        10,56,12,56,392,9,56,1,56,1,56,1,56,1,57,1,57,1,57,5,57,400,8,57,
        10,57,12,57,403,9,57,3,57,405,8,57,1,58,1,58,5,58,409,8,58,10,58,
        12,58,412,9,58,1,59,1,59,3,59,416,8,59,1,59,4,59,419,8,59,11,59,
        12,59,420,1,60,1,60,3,60,425,8,60,1,61,1,61,1,61,1,62,1,62,3,62,
        432,8,62,1,62,1,62,1,62,5,62,437,8,62,10,62,12,62,440,9,62,1,63,
        1,63,4,63,444,8,63,11,63,12,63,445,1,64,1,64,1,65,1,65,1,66,1,66,
        1,67,1,67,1,68,1,68,3,68,458,8,68,1,69,1,69,1,70,1,70,1,70,1,71,
        1,71,5,71,467,8,71,10,71,12,71,470,9,71,1,71,3,71,473,8,71,1,71,
        1,71,1,72,1,72,5,72,479,8,72,10,72,12,72,482,9,72,1,72,1,72,1,72,
        1,72,1,72,1,349,0,73,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
        107,54,109,55,111,56,113,57,115,0,117,0,119,0,121,0,123,0,125,58,
        127,59,129,0,131,0,133,0,135,0,137,0,139,0,141,60,143,61,145,62,
        1,0,11,2,0,10,10,13,13,3,0,9,10,13,13,32,32,1,0,49,57,1,0,48,57,
        2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,13,13,34,34,92,92,7,
        0,34,34,92,92,98,98,102,102,110,110,114,114,116,116,4,0,48,57,65,
        90,95,95,97,122,1,0,65,90,1,0,97,122,499,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
        0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,
        0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,
        145,1,0,0,0,1,147,1,0,0,0,3,153,1,0,0,0,5,162,1,0,0,0,7,165,1,0,
        0,0,9,170,1,0,0,0,11,174,1,0,0,0,13,179,1,0,0,0,15,185,1,0,0,0,17,
        189,1,0,0,0,19,195,1,0,0,0,21,200,1,0,0,0,23,207,1,0,0,0,25,214,
        1,0,0,0,27,219,1,0,0,0,29,225,1,0,0,0,31,237,1,0,0,0,33,241,1,0,
        0,0,35,246,1,0,0,0,37,250,1,0,0,0,39,255,1,0,0,0,41,261,1,0,0,0,
        43,266,1,0,0,0,45,269,1,0,0,0,47,272,1,0,0,0,49,275,1,0,0,0,51,278,
        1,0,0,0,53,281,1,0,0,0,55,283,1,0,0,0,57,285,1,0,0,0,59,288,1,0,
        0,0,61,291,1,0,0,0,63,294,1,0,0,0,65,296,1,0,0,0,67,298,1,0,0,0,
        69,300,1,0,0,0,71,302,1,0,0,0,73,304,1,0,0,0,75,306,1,0,0,0,77,308,
        1,0,0,0,79,310,1,0,0,0,81,312,1,0,0,0,83,314,1,0,0,0,85,316,1,0,
        0,0,87,318,1,0,0,0,89,320,1,0,0,0,91,322,1,0,0,0,93,324,1,0,0,0,
        95,326,1,0,0,0,97,328,1,0,0,0,99,330,1,0,0,0,101,332,1,0,0,0,103,
        343,1,0,0,0,105,358,1,0,0,0,107,364,1,0,0,0,109,371,1,0,0,0,111,
        384,1,0,0,0,113,386,1,0,0,0,115,404,1,0,0,0,117,406,1,0,0,0,119,
        413,1,0,0,0,121,424,1,0,0,0,123,426,1,0,0,0,125,431,1,0,0,0,127,
        441,1,0,0,0,129,447,1,0,0,0,131,449,1,0,0,0,133,451,1,0,0,0,135,
        453,1,0,0,0,137,457,1,0,0,0,139,459,1,0,0,0,141,461,1,0,0,0,143,
        464,1,0,0,0,145,476,1,0,0,0,147,148,5,98,0,0,148,149,5,114,0,0,149,
        150,5,101,0,0,150,151,5,97,0,0,151,152,5,107,0,0,152,2,1,0,0,0,153,
        154,5,99,0,0,154,155,5,111,0,0,155,156,5,110,0,0,156,157,5,116,0,
        0,157,158,5,105,0,0,158,159,5,110,0,0,159,160,5,117,0,0,160,161,
        5,101,0,0,161,4,1,0,0,0,162,163,5,105,0,0,163,164,5,102,0,0,164,
        6,1,0,0,0,165,166,5,101,0,0,166,167,5,108,0,0,167,168,5,115,0,0,
        168,169,5,101,0,0,169,8,1,0,0,0,170,171,5,102,0,0,171,172,5,111,
        0,0,172,173,5,114,0,0,173,10,1,0,0,0,174,175,5,116,0,0,175,176,5,
        114,0,0,176,177,5,117,0,0,177,178,5,101,0,0,178,12,1,0,0,0,179,180,
        5,102,0,0,180,181,5,97,0,0,181,182,5,108,0,0,182,183,5,115,0,0,183,
        184,5,101,0,0,184,14,1,0,0,0,185,186,5,105,0,0,186,187,5,110,0,0,
        187,188,5,116,0,0,188,16,1,0,0,0,189,190,5,102,0,0,190,191,5,108,
        0,0,191,192,5,111,0,0,192,193,5,97,0,0,193,194,5,116,0,0,194,18,
        1,0,0,0,195,196,5,98,0,0,196,197,5,111,0,0,197,198,5,111,0,0,198,
        199,5,108,0,0,199,20,1,0,0,0,200,201,5,115,0,0,201,202,5,116,0,0,
        202,203,5,114,0,0,203,204,5,105,0,0,204,205,5,110,0,0,205,206,5,
        103,0,0,206,22,1,0,0,0,207,208,5,114,0,0,208,209,5,101,0,0,209,210,
        5,116,0,0,210,211,5,117,0,0,211,212,5,114,0,0,212,213,5,110,0,0,
        213,24,1,0,0,0,214,215,5,110,0,0,215,216,5,117,0,0,216,217,5,108,
        0,0,217,218,5,108,0,0,218,26,1,0,0,0,219,220,5,99,0,0,220,221,5,
        108,0,0,221,222,5,97,0,0,222,223,5,115,0,0,223,224,5,115,0,0,224,
        28,1,0,0,0,225,226,5,99,0,0,226,227,5,111,0,0,227,228,5,110,0,0,
        228,229,5,115,0,0,229,230,5,116,0,0,230,231,5,114,0,0,231,232,5,
        117,0,0,232,233,5,99,0,0,233,234,5,116,0,0,234,235,5,111,0,0,235,
        236,5,114,0,0,236,30,1,0,0,0,237,238,5,118,0,0,238,239,5,97,0,0,
        239,240,5,114,0,0,240,32,1,0,0,0,241,242,5,115,0,0,242,243,5,101,
        0,0,243,244,5,108,0,0,244,245,5,102,0,0,245,34,1,0,0,0,246,247,5,
        110,0,0,247,248,5,101,0,0,248,249,5,119,0,0,249,36,1,0,0,0,250,251,
        5,118,0,0,251,252,5,111,0,0,252,253,5,105,0,0,253,254,5,100,0,0,
        254,38,1,0,0,0,255,256,5,99,0,0,256,257,5,111,0,0,257,258,5,110,
        0,0,258,259,5,115,0,0,259,260,5,116,0,0,260,40,1,0,0,0,261,262,5,
        102,0,0,262,263,5,117,0,0,263,264,5,110,0,0,264,265,5,99,0,0,265,
        42,1,0,0,0,266,267,5,38,0,0,267,268,5,38,0,0,268,44,1,0,0,0,269,
        270,5,124,0,0,270,271,5,124,0,0,271,46,1,0,0,0,272,273,5,61,0,0,
        273,274,5,61,0,0,274,48,1,0,0,0,275,276,5,58,0,0,276,277,5,61,0,
        0,277,50,1,0,0,0,278,279,5,33,0,0,279,280,5,61,0,0,280,52,1,0,0,
        0,281,282,5,60,0,0,282,54,1,0,0,0,283,284,5,62,0,0,284,56,1,0,0,
        0,285,286,5,60,0,0,286,287,5,61,0,0,287,58,1,0,0,0,288,289,5,62,
        0,0,289,290,5,61,0,0,290,60,1,0,0,0,291,292,5,60,0,0,292,293,5,45,
        0,0,293,62,1,0,0,0,294,295,5,43,0,0,295,64,1,0,0,0,296,297,5,45,
        0,0,297,66,1,0,0,0,298,299,5,42,0,0,299,68,1,0,0,0,300,301,5,47,
        0,0,301,70,1,0,0,0,302,303,5,92,0,0,303,72,1,0,0,0,304,305,5,33,
        0,0,305,74,1,0,0,0,306,307,5,61,0,0,307,76,1,0,0,0,308,309,5,94,
        0,0,309,78,1,0,0,0,310,311,5,37,0,0,311,80,1,0,0,0,312,313,5,44,
        0,0,313,82,1,0,0,0,314,315,5,59,0,0,315,84,1,0,0,0,316,317,5,58,
        0,0,317,86,1,0,0,0,318,319,5,46,0,0,319,88,1,0,0,0,320,321,5,40,
        0,0,321,90,1,0,0,0,322,323,5,41,0,0,323,92,1,0,0,0,324,325,5,91,
        0,0,325,94,1,0,0,0,326,327,5,93,0,0,327,96,1,0,0,0,328,329,5,123,
        0,0,329,98,1,0,0,0,330,331,5,125,0,0,331,100,1,0,0,0,332,333,5,47,
        0,0,333,334,5,47,0,0,334,338,1,0,0,0,335,337,8,0,0,0,336,335,1,0,
        0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,341,1,0,
        0,0,340,338,1,0,0,0,341,342,6,50,0,0,342,102,1,0,0,0,343,344,5,47,
        0,0,344,345,5,42,0,0,345,349,1,0,0,0,346,348,9,0,0,0,347,346,1,0,
        0,0,348,351,1,0,0,0,349,350,1,0,0,0,349,347,1,0,0,0,350,352,1,0,
        0,0,351,349,1,0,0,0,352,353,5,42,0,0,353,354,5,47,0,0,354,355,1,
        0,0,0,355,356,6,51,0,0,356,104,1,0,0,0,357,359,7,1,0,0,358,357,1,
        0,0,0,359,360,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,362,1,
        0,0,0,362,363,6,52,0,0,363,106,1,0,0,0,364,368,7,2,0,0,365,367,7,
        3,0,0,366,365,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,
        0,0,0,369,108,1,0,0,0,370,368,1,0,0,0,371,372,3,115,57,0,372,110,
        1,0,0,0,373,374,3,115,57,0,374,376,3,117,58,0,375,377,3,119,59,0,
        376,375,1,0,0,0,376,377,1,0,0,0,377,385,1,0,0,0,378,380,3,115,57,
        0,379,381,3,117,58,0,380,379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,
        0,0,382,383,3,119,59,0,383,385,1,0,0,0,384,373,1,0,0,0,384,378,1,
        0,0,0,385,112,1,0,0,0,386,390,5,34,0,0,387,389,3,121,60,0,388,387,
        1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,393,
        1,0,0,0,392,390,1,0,0,0,393,394,5,34,0,0,394,395,6,56,1,0,395,114,
        1,0,0,0,396,405,5,48,0,0,397,401,7,2,0,0,398,400,7,3,0,0,399,398,
        1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,405,
        1,0,0,0,403,401,1,0,0,0,404,396,1,0,0,0,404,397,1,0,0,0,405,116,
        1,0,0,0,406,410,5,46,0,0,407,409,7,3,0,0,408,407,1,0,0,0,409,412,
        1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,118,1,0,0,0,412,410,
        1,0,0,0,413,415,7,4,0,0,414,416,7,5,0,0,415,414,1,0,0,0,415,416,
        1,0,0,0,416,418,1,0,0,0,417,419,7,3,0,0,418,417,1,0,0,0,419,420,
        1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,120,1,0,0,0,422,425,
        8,6,0,0,423,425,3,123,61,0,424,422,1,0,0,0,424,423,1,0,0,0,425,122,
        1,0,0,0,426,427,5,92,0,0,427,428,7,7,0,0,428,124,1,0,0,0,429,432,
        3,137,68,0,430,432,3,135,67,0,431,429,1,0,0,0,431,430,1,0,0,0,432,
        438,1,0,0,0,433,437,3,137,68,0,434,437,3,135,67,0,435,437,3,133,
        66,0,436,433,1,0,0,0,436,434,1,0,0,0,436,435,1,0,0,0,437,440,1,0,
        0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,126,1,0,0,0,440,438,1,0,
        0,0,441,443,3,139,69,0,442,444,7,8,0,0,443,442,1,0,0,0,444,445,1,
        0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,128,1,0,0,0,447,448,7,
        9,0,0,448,130,1,0,0,0,449,450,7,10,0,0,450,132,1,0,0,0,451,452,7,
        3,0,0,452,134,1,0,0,0,453,454,5,95,0,0,454,136,1,0,0,0,455,458,3,
        129,64,0,456,458,3,131,65,0,457,455,1,0,0,0,457,456,1,0,0,0,458,
        138,1,0,0,0,459,460,5,64,0,0,460,140,1,0,0,0,461,462,9,0,0,0,462,
        463,6,70,2,0,463,142,1,0,0,0,464,468,5,34,0,0,465,467,3,121,60,0,
        466,465,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,
        469,472,1,0,0,0,470,468,1,0,0,0,471,473,5,0,0,1,472,471,1,0,0,0,
        472,473,1,0,0,0,473,474,1,0,0,0,474,475,6,71,3,0,475,144,1,0,0,0,
        476,480,5,34,0,0,477,479,3,121,60,0,478,477,1,0,0,0,479,482,1,0,
        0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,480,1,0,
        0,0,483,484,5,92,0,0,484,485,8,7,0,0,485,486,1,0,0,0,486,487,6,72,
        4,0,487,146,1,0,0,0,23,0,338,349,360,368,376,380,384,390,401,404,
        410,415,420,424,431,436,438,445,457,468,472,480,5,6,0,0,1,56,0,1,
        70,1,1,71,2,1,72,3
    ]

class CSlangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BREAK = 1
    CONTINUE = 2
    IF = 3
    ELSE = 4
    FOR = 5
    TRUE = 6
    FALSE = 7
    INT = 8
    FLOAT = 9
    BOOL = 10
    STRING = 11
    RETURN = 12
    NULL = 13
    CLASS = 14
    CONSTRUCTOR = 15
    VAR = 16
    SELF = 17
    NEW = 18
    VOID = 19
    CONST = 20
    FUNC = 21
    AND = 22
    OR = 23
    EQUAL = 24
    ASSIGN = 25
    NOT_EQUAL = 26
    LESS_THAN = 27
    GREATER_THAN = 28
    LESS_THAN_EQUAL = 29
    GREATER_THAN_EQUAL = 30
    SUPERCLASS = 31
    ADD = 32
    SUB = 33
    MUL = 34
    DIV_FLOAT = 35
    DIV_INT = 36
    NOT = 37
    EQ = 38
    STRING_CONCAT = 39
    MOD = 40
    COMMA = 41
    SEMI = 42
    COLON = 43
    DOT = 44
    LP = 45
    RP = 46
    LSB = 47
    RSB = 48
    LB = 49
    RB = 50
    LINE_COMMENT = 51
    BLOCK_COMMENT = 52
    WS = 53
    INTARR = 54
    INTLIT = 55
    FLOATLIT = 56
    STRINGLIT = 57
    ID = 58
    STATIC_ID = 59
    ERROR_CHAR = 60
    UNCLOSE_STRING = 61
    ILLEGAL_ESCAPE = 62

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'break'", "'continue'", "'if'", "'else'", "'for'", "'true'", 
            "'false'", "'int'", "'float'", "'bool'", "'string'", "'return'", 
            "'null'", "'class'", "'constructor'", "'var'", "'self'", "'new'", 
            "'void'", "'const'", "'func'", "'&&'", "'||'", "'=='", "':='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'<-'", "'+'", "'-'", 
            "'*'", "'/'", "'\\'", "'!'", "'='", "'^'", "'%'", "','", "';'", 
            "':'", "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "BREAK", "CONTINUE", "IF", "ELSE", "FOR", "TRUE", "FALSE", "INT", 
            "FLOAT", "BOOL", "STRING", "RETURN", "NULL", "CLASS", "CONSTRUCTOR", 
            "VAR", "SELF", "NEW", "VOID", "CONST", "FUNC", "AND", "OR", 
            "EQUAL", "ASSIGN", "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", 
            "LESS_THAN_EQUAL", "GREATER_THAN_EQUAL", "SUPERCLASS", "ADD", 
            "SUB", "MUL", "DIV_FLOAT", "DIV_INT", "NOT", "EQ", "STRING_CONCAT", 
            "MOD", "COMMA", "SEMI", "COLON", "DOT", "LP", "RP", "LSB", "RSB", 
            "LB", "RB", "LINE_COMMENT", "BLOCK_COMMENT", "WS", "INTARR", 
            "INTLIT", "FLOATLIT", "STRINGLIT", "ID", "STATIC_ID", "ERROR_CHAR", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "BREAK", "CONTINUE", "IF", "ELSE", "FOR", "TRUE", "FALSE", 
                  "INT", "FLOAT", "BOOL", "STRING", "RETURN", "NULL", "CLASS", 
                  "CONSTRUCTOR", "VAR", "SELF", "NEW", "VOID", "CONST", 
                  "FUNC", "AND", "OR", "EQUAL", "ASSIGN", "NOT_EQUAL", "LESS_THAN", 
                  "GREATER_THAN", "LESS_THAN_EQUAL", "GREATER_THAN_EQUAL", 
                  "SUPERCLASS", "ADD", "SUB", "MUL", "DIV_FLOAT", "DIV_INT", 
                  "NOT", "EQ", "STRING_CONCAT", "MOD", "COMMA", "SEMI", 
                  "COLON", "DOT", "LP", "RP", "LSB", "RSB", "LB", "RB", 
                  "LINE_COMMENT", "BLOCK_COMMENT", "WS", "INTARR", "INTLIT", 
                  "FLOATLIT", "STRINGLIT", "INTPART", "DECPART", "EXPPART", 
                  "CHAR", "ESCAPE", "ID", "STATIC_ID", "UPPER", "LOWER", 
                  "DIGIT", "UNDERSCORE", "LETTER", "AT", "ERROR_CHAR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE" ]

    grammarFileName = "CSlang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[56] = self.STRINGLIT_action 
            actions[70] = self.ERROR_CHAR_action 
            actions[71] = self.UNCLOSE_STRING_action 
            actions[72] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

            	self.text = self.text[1:-1]

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            	y = str(self.text)
            	raise UncloseString(y[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

            	raise IllegalEscape(self.text[1:])

     


